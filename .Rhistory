library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
navbarPage("ggPigeon",
tabPanel("Start"),
tabPanel("Layer",
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)),
mainPanel(
plotOutput("distPlot"))))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('pigeon_explore')
runApp('pigeon_explore')
shiny::runApp('pigeon_explore')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
navbarPage("ggPigeon",
tabPanel("Start",
sidebarLayout(
sidebarPanel(
fileInput(inputId = "file",
label = "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")),
checkboxInput(inputId = "header",
label = "Header",
value = TRUE),
checkboxInput(inputId = "head",
label = "Head",
value = FALSE),
uiOutput("xchoice"),
uiOutput("ychoice")),
mainPanel(tableOutput("table")))),
tabPanel("Layer",
sidebarLayout(
sidebarPanel(
#### EXAMPLE INPUT
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)),
mainPanel(
plotOutput("histogram"))))
)
)
server <- function(input, output) {
# Getting Data from the csv file uploaded
Data_df <- reactive({
req(input$file)
as.data.frame(read.csv(input$file$datapath,
header = input$header))
})
Data_names <- reactive({
names(Data_df())
})
# Setting up variables
output$xchoice <- renderUI({
req(input$file)
selectInput(inputId = "xchoice",
label = "Choose x variable",
choices = Data_names())
})
output$ychoice <- renderUI({
req(input$file)
selectInput(inputId = "ychoice",
label = "Choose y variable",
choices = Data_names())
})
# Main Table Outputs
output$table <- renderTable({
req(input$file)
if(input$head){
return(head(Data_df()))
}else{
return(Data_df())
}})
# Practice Plot
output$histogram <- renderPlot({
plot_base <- ggplot(Data_df(), aes(x = input$xchoice))
return(plot_base + ggplot2::geom_histogram())
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
navbarPage("ggPigeon",
tabPanel("Start",
sidebarLayout(
sidebarPanel(
fileInput(inputId = "file",
label = "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")),
checkboxInput(inputId = "header",
label = "Header",
value = TRUE),
checkboxInput(inputId = "head",
label = "Head",
value = FALSE),
uiOutput("xchoice"),
uiOutput("ychoice")),
mainPanel(tableOutput("table")))),
tabPanel("Layer",
sidebarLayout(
sidebarPanel(
#### EXAMPLE INPUT
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)),
mainPanel(
plotOutput("histogram"))))
)
)
server <- function(input, output) {
# Getting Data from the csv file uploaded
Data_df <- reactive({
req(input$file)
as.data.frame(read.csv(input$file$datapath,
header = input$header))
})
Data_names <- reactive({
names(Data_df())
})
# Setting up variables
output$xchoice <- renderUI({
req(input$file)
selectInput(inputId = "xchoice",
label = "Choose x variable",
choices = Data_names())
})
output$ychoice <- renderUI({
req(input$file)
selectInput(inputId = "ychoice",
label = "Choose y variable",
choices = Data_names())
})
# Main Table Outputs
output$table <- renderTable({
req(input$file)
if(input$head){
return(head(Data_df()))
}else{
return(Data_df())
}})
# Practice Plot
output$histogram <- renderPlot({
plot_base <- ggplot2::ggplot(Data_df(), aes(x = input$xchoice))
return(plot_base + ggplot2::geom_histogram())
})
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Getting Data from the csv file uploaded
Data_df <- reactive({
req(input$file)
as.data.frame(read.csv(input$file$datapath,
header = input$header))
})
Data_names <- reactive({
names(Data_df())
})
# Setting up variables
output$xchoice <- renderUI({
req(input$file)
selectInput(inputId = "xchoice",
label = "Choose x variable",
choices = Data_names())
})
output$ychoice <- renderUI({
req(input$file)
selectInput(inputId = "ychoice",
label = "Choose y variable",
choices = Data_names())
})
# Main Table Outputs
output$table <- renderTable({
req(input$file)
if(input$head){
return(head(Data_df()))
}else{
return(Data_df())
}})
# Practice Plot
output$histogram <- renderPlot({
plot_base <- ggplot2::ggplot(Data_df(), ggplot2::aes(x = input$xchoice))
return(plot_base + ggplot2::geom_histogram())
})
}
# Run the application
shinyApp(ui = ui, server = server)
return(plot_base + ggplot2::geom_density())
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
?uioutput
?uioutput()
?shiny::uioutput
??uiOutput
?selectInput
runApp('pigeon_explore')
library(shiny)
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
?conditionalPanel
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
runApp('pigeon_explore')
library(ggplot2)
shiny::runApp('pigeon_explore')
runApp('pigeon_explore')
# Return a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
D = matrix(runif(400), nrow = 20)
colnames(D) = labs = sapply(1:20, function(i) {paste0("col",i)})
# Define UI for application that summarises data
ui <- fluidPage(
# Application title
titlePanel("Summaries"),
# Select columns to get fed into summary
tabsetPanel(
tabPanel("Matching Variables Info",
sidebarPanel(
numericInput("NoVars","No. of variables to summarize",
value = 3, min = 2, max = dim(D)[2]),
uiOutput("VarsInput")
),
# Show summaries of columns choosen above
mainPanel(
verbatimTextOutput("dataInfo")
)
)
)
)
# Define the server code
server <- function(input, output){
K <- reactive({
input$NoVars
})
output$VarsInput <- renderUI({
NoV = K()
C = sapply(1:NoV, function(i){paste0("cols",i)})
L = sapply(1:NoV, function(i){paste0("label",i)})
output = tagList()
for(i in seq_along(1:NoV)){
output[[i]] = tagList()
output[[i]][[1]] = selectInput(C[i], "Variable to summarize:", labs)
output[[i]][[2]] = textInput(L[i], label = "Label for variable:",
value = "Label for variable Here")
} ## for loop
output
})
output$dataInfo <- renderPrint({
C <- sapply(1:K(), function(i) {input[[paste0("cols",i)]]})
## the code in the line above doesn't work
summary(D[, C])
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
runApp('pigeon_explore')
?uiOutput
?renderUI()
?conditionalPanel
?selectizeInput
library(shiny)
iris
ggplot(iris, aes(x = Petal.width, linetype = 2)) + geom_area(stat = "bin")
ggplot(iris, aes(x = Petal.width, linetype = 2)) + geom_dotplot(stat = "bin")
ggplot(iris, aes(x = Petal.width, linetype = 2)) + geom_dotplot()
ggplot(iris, aes(x = Petal.width)) + geom_dotplot(aes(linetype = 2))
ggplot(iris, aes(x = Petal.width)) + geom_density(aes(linetype = 2))
ggplot(iris, aes(x = Petal.width)) + geom_density()
ggplot(iris, aes(x = iris$Petal.width)) + geom_density()
ggplot(iris, aes(x = Petal.Width)) + geom_density()
ggplot(iris, aes(x = Petal.Width)) + geom_density(linetype = 2)
ggplot(iris, aes(x = Petal.Width)) + geom_density(linetype = 12)
ggplot(iris, aes(x = Petal.Width)) + geom_density(linetype = 13)
ggplot(iris, aes(x = Petal.Width)) + geom_density(linetype = 3)
ggplot(iris, aes(x = Petal.Width)) + geom_density(linetype = 1)
ggplot(iris, aes(x = Petal.Width)) + geom_dotplot(linetype = 1)
